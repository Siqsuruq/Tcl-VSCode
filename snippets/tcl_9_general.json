{
    "Package Files": {
        "prefix": "package files",
        "body": [
            "package files ${1:pkgname}"
        ],
        "description": "Lists all files forming part of package."
    },
    "Package Forget": {
        "prefix": "package forget",
        "body": [
            "package forget ${1:pkgnames}"
        ],
        "description": "Removes all information about each specified package from this interpreter, including information provided by both package ifneeded and package provide."
    },
    "Package Ifneeded": {
        "prefix": "package ifneeded",
        "body": [
            "package ifneeded ${1:pkgname} ${0:version}"
        ],
        "description": "Package Ifneeded"
    },
    "Package Names": {
        "prefix": "package names",
        "body": [
            "package names"
        ],
        "description": "Returns a list of the names of all packages"
    },
    "Package Present": {
        "prefix": "package present",
        "body": [
            "package present ${1:pkgname}"
        ],
        "description": "This command is equivalent to package require except that it does not try and load the package if it is not already loaded"
    },
    "Package Provide": {
        "prefix": "package provide",
        "body": [
            "package provide ${1:pkgname} ${0:version}"
        ],
        "description": "This command is invoked to indicate that version ${version} of package ${pkgname} is now present in the interpreter."
    },
    "Package Require": {
        "prefix": "package require",
        "body": [
            "package require ${1:pkgname}"
        ],
        "description": "Require a Tcl package"
    },
    "Package Versions": {
        "prefix": "package versions",
        "body": [
            "package versions ${1:pkgname}"
        ],
        "description": "Returns a list of all the version numbers of ${pkgname} for which information has been provided by package ifneeded commands."
    },
    "Package Vsatisfies": {
        "prefix": "package vsatisfies",
        "body": [
            "package vsatisfies ${1:version} ${0:requirement}"
        ],
        "description": "Returns 1 if the ${version} satisfies at least one of the given ${requirements}, and 0 otherwise. Each requirement is allowed to have any of the forms: min , min- , min-max. Read more on the official documentation page: https://tcl.tk/man/tcl9.0/TclCmd/package.html"
    },
    "Package Prefer": {
        "prefix": "package prefer ",
        "body": [
            "package prefer ${1| ,latest,stable|}"
        ],
        "description": "Read more on the official documentation page: https://tcl.tk/man/tcl9.0/TclCmd/package.html"
    },
    "for": {
        "prefix": "for",
        "body": [
            "for {set ${1:index} ${2:0}} {\\$${1:index} < ${3:length}} {incr ${1:index}} {",
            "\t$0",
            "}"
        ],
        "description": "For Loop"
    },
    "foreach": {
        "prefix": "foreach",
        "body": [
            "foreach ${1:var} ${2:list} {",
            "\t$0",
            "}"
        ],
        "description": "Foreach Loop"
    },
    "if": {
        "prefix": "if",
        "body": [
            "if {${1:var}} {",
            "\t$0",
            "}"
        ],
        "description": "If Condition"
    },
    "elseif": {
        "prefix": "elseif",
        "body": [
            "elseif {${1:var}} {",
            "\t$0",
            "}"
        ],
        "description": "ElseIf Condition"
    },
    "else": {
        "prefix": "else",
        "body": [
            "else {",
            "\t$0",
            "}"
        ],
        "description": "Else Block"
    },
    "proc": {
        "prefix": "proc",
        "body": [
            "proc ${1:name} {${2:args}} {",
            "\t$0",
            "}"
        ],
        "description": "Proc Block"
    },
    "while": {
        "prefix": "while",
        "body": [
            "while {${1:var}} {",
            "\t$0",
            "}"
        ],
        "description": "While Loop"
    },
    "catch": {
        "prefix": "catch",
        "body": [
            "catch {${1:body}} ${2:var}"
        ],
        "description": "Evaluate script and trap exceptional returns."
    },
    "try": {
        "prefix": "try",
        "body": [
            "try {",
            "\t$1",
            "} finally {",
            "\t$0",
            "}"
        ],
        "description": "Try Block"
    },
    "switch": {
        "prefix": "switch",
        "body": [
            "switch ${1:var} {",
            "\t${2:case} {$3}",
            "\tdefault {$0}",
            "}"
        ],
        "description": "Switch Block"
    },
    "Dictionary manipulate": {
        "prefix": "dict",
        "body": [
            "dict ${1|append,exists,filter,for,get,getdef,getwithdefault,incr,info,keys,lappend,map,merge,remove,replace,set,size,unset,update,values,with|} $${0:dictName}"
        ],
        "description": "Manipulate dictionaries"
    },
    "Dictionary create": {
        "prefix": "dict create",
        "body": [
            "dict create ${1:key1} ${2:val1} ${3:key2} ${0:val2}"
        ],
        "description": "Return a new dictionary that contains each of the key/value mappings listed as arguments (keys and values alternating, with each key being followed by its associated value.) "
    },
    "Append": {
        "prefix": "append",
        "body": [
            "append ${1:var} ${0:val}"
        ],
        "description": "Append all of the $val arguments to the current value of variable $var."
    },
    "Apply": {
        "prefix": "apply",
        "body": [
            "apply ${1:func} ${0:args}"
        ],
        "description": "Apply an anonymous function. The command apply applies the function $func to the arguments $arg1 $arg2 ... and returns the result."
    },
    "Change working directory": {
        "prefix": "cd",
        "body": [
            "cd ${0:dirName}"
        ],
        "description": "Change the current working directory to $dirName, or to the home directory (as specified in the HOME environment variable) if $dirName is not given. Returns an empty string. Note that the current working directory is a per-process resource; the cd command changes the working directory for all interpreters and all threads."
    },
    "Tell": {
        "prefix": "tell",
        "body": [
            "tell $${0:channelId}"
        ],
        "description": "Return current access position for an open channel."
    },
    "Exit": {
        "prefix": "exit",
        "body": [
            "exit ${1|returnCode, |}"
        ],
        "description": "Terminate the process, returning returnCode to the system as the exit status. If returnCode is not specified then it defaults to 0."
    },
    "Unset": {
        "prefix": "unset",
        "body": [
            "unset ${1|-nocomplain, |} ${0:vars}"
        ],
        "description": "This command removes one or more variables. Each name is a variable name, specified in any of the ways acceptable to the set command."
    }
}