{
    "Package Files": {
        "prefix": "package files",
        "body": [
            "package files ${1:pkgname}"
        ],
        "description": "Lists all files forming part of package."
    },
    "Package Forget": {
        "prefix": "package forget",
        "body": [
            "package forget ${1:pkgnames}"
        ],
        "description": "Removes all information about each specified package from this interpreter, including information provided by both package ifneeded and package provide."
    },
    "Package Ifneeded": {
        "prefix": "package ifneeded",
        "body": [
            "package ifneeded ${1:pkgname} ${0:version}"
        ],
        "description": "Package Ifneeded"
    },
    "Package Names": {
        "prefix": "package names",
        "body": [
            "package names"
        ],
        "description": "Returns a list of the names of all packages"
    },
    "Package Present": {
        "prefix": "package present",
        "body": [
            "package present ${1:pkgname}"
        ],
        "description": "This command is equivalent to package require except that it does not try and load the package if it is not already loaded"
    },
    "Package Provide": {
        "prefix": "package provide",
        "body": [
            "package provide ${1:pkgname} ${0:version}"
        ],
        "description": "This command is invoked to indicate that version ${version} of package ${pkgname} is now present in the interpreter."
    },
    "Package Require": {
        "prefix": "package require",
        "body": [
            "package require ${1:pkgname}"
        ],
        "description": "Require a Tcl package"
    },
    "Package Versions": {
        "prefix": "package versions",
        "body": [
            "package versions ${1:pkgname}"
        ],
        "description": "Returns a list of all the version numbers of ${pkgname} for which information has been provided by package ifneeded commands.",
    },
    "Package Vsatisfies": {
        "prefix": "package vsatisfies",
        "body": [
            "package vsatisfies ${1:version} ${0:requirement}"
        ],
        "description": "Returns 1 if the ${version} satisfies at least one of the given ${requirements}, and 0 otherwise. Each requirement is allowed to have any of the forms: min , min- , min-max. Read more on the official documentation page: https://tcl.tk/man/tcl9.0/TclCmd/package.html"
    },
    "Package Prefer": {
        "prefix": "package prefer ",
        "body": [
            "package prefer ${1| ,latest,stable|}"
        ],
        "description": "Read more on the official documentation page: https://tcl.tk/man/tcl9.0/TclCmd/package.html"
    },
    "for": {
        "prefix": "for",
        "body": [
            "for {set ${1:index} ${2:0}} {\\$${1:index} < ${3:length}} {incr ${1:index}} {",
            "\t$0",
            "}"
        ],
        "description": "For Loop"
    },
    "foreach": {
        "prefix": "foreach",
        "body": [
            "foreach ${1:var} ${2:list} {",
            "\t$0",
            "}"
        ],
        "description": "Foreach Loop"
    },
    "if": {
        "prefix": "if",
        "body": [
            "if {${1:var}} {",
            "\t$0",
            "}"
        ],
        "description": "If Condition"
    },
    "elseif": {
        "prefix": "elseif",
        "body": [
            "elseif {${1:var}} {",
            "\t$0",
            "}"
        ],
        "description": "ElseIf Condition"
    },
    "else": {
        "prefix": "else",
        "body": [
            "else {",
            "\t$0",
            "}"
        ],
        "description": "Else Block"
    },
    "proc": {
        "prefix": "proc",
        "body": [
            "proc ${1:name} {${2:args}} {",
            "\t$0",
            "}"
        ],
        "description": "Proc Block"
    },
    "while": {
        "prefix": "while",
        "body": [
            "while {${1:var}} {",
            "\t$0",
            "}"
        ],
        "description": "While Loop"
    },
    "catch": {
        "prefix": "catch",
        "body": [
            "catch {${1:body}} ${2:var}"
        ],
        "description": "Catch Block"
    },
    "try": {
        "prefix": "try",
        "body": [
            "try {",
            "\t$1",
            "} finally {",
            "\t$0",
            "}"
        ],
        "description": "Try Block"
    },
    "switch": {
        "prefix": "switch",
        "body": [
            "switch ${1:var} {",
            "\t${2:case} {$3}",
            "\tdefault {$0}",
            "}"
        ],
        "description": "Switch Block"
    },
    "oo::class create": {
        "prefix": "oo::class create",
        "body": [
            "oo::class create ${1:name} {",
            "\t${2:superclass s}",
            "\tconstructor {} {",
            "\t\t$3",
            "\t}",
            "\tmethod ${4:m} {} {",
            "\t\t$0",
            "\t}",
            "}"
        ],
        "description": "Class Create"
    },
    "tk_chooseDirectory": {
        "prefix": "tk_chooseDirectory",
        "body": [
            "tk_chooseDirectory ${-initialdir dirname -mustexist boolean -title titleString}"
        ],
        "description": "Choose Directory"
    },
    "tk_getOpenFile": {
        "prefix": "tk_getOpenFile",
        "body": [
            "tk_getOpenFile -filetypes {",
            "\t\t{{Text Files}       {.txt}        }",
            "\t\t{{All Files}        *             }",
            "\t}"
        ],
        "description": "Open File Dialog"
    },
    "tk_getSaveFile": {
        "prefix": "tk_getSaveFile",
        "body": [
            "tk_getSaveFile -filetypes {",
            "\t\t{{Text Files}       {.txt}        }",
            "\t\t{{All Files}        *             }",
            "\t}"
        ],
        "description": "Save File Dialog"
    },
    "tk_messageBox": {
        "prefix": "tk_messageBox",
        "body": [
            "tk_messageBox ${-message msg}"
        ],
        "description": "Message Box"
    },
    "NX create class": {
        "prefix": "class",
        "body": [
            "nx::Class create ${1:ClassName} {",
            "\t$0",
            "}"
        ],
        "description": "Create class"
    },
    "NX create class from superclass": {
        "prefix": "class",
        "body": [
            "nx::Class create ${2:ClassName} -superclasses ${1:superClassNames} {",
            "\t$0",
            "}"
        ],
        "description": "If superClassNames is not specified, returns the superclasses of the class. If provided, the class becomes the subclass of superClassNames."
    },
    "NX create class with constructor": {
        "prefix": "class",
        "body": [
            "nx::Class create ${1:ClassName} {",
            "\t:method init {${2:args}} {",
            "\t\t$0",
            "\t}",
            "}"
        ],
        "description": "Create class with constructor"
    },
    "Class property": {
        "prefix": "property",
        "body": [
            ":property ${1:name}:object,type=${2:type}"
        ],
        "description": "Class property"
    },

    "Class variable": {
        "prefix": "variable",
        "body": [
            ":variable ${1:name}:object,type=${2:type}"
        ],
        "description": "Class property"
    },

    "Public method": {
        "prefix": "pubmethod",
        "body": [
            ":public method ${1:name} {${2:var1}, type=${3:type1} ${4:var2}, type=${5:type1}} {",
            "\t\n}"
        ],
        "description": "public class method"
    },

    "Private method": {
        "prefix": "privmethod",
        "body": [
            ":private method ${1:name} {${2:var1}, type=${3:type1} ${4:var2}, type=${5:type1}} {",
            "\t\n}"
        ],
        "description": "private class method"
    }
}